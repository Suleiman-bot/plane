services:
#  web:
#    container_name: web
#    build:
#context: .
  #    dockerfile: ./apps/web/Dockerfile.web
  #    args:
   #     DOCKER_BUILDKIT: 1
   # restart: always
   # depends_on:
   #   - api
   # ports:
    #  - "3001:3000"
   # networks:
    #  - plane-net

  admin:
    container_name: admin
    build:
      context: .
      dockerfile: ./apps/admin/Dockerfile.admin
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    depends_on:
      - api
      - frontend
    networks:
      - plane-net

  space:
    container_name: space
    build:
      context: .
      dockerfile: ./apps/space/Dockerfile.space
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    depends_on:
      - api
      - frontend
    networks:
      - plane-net

  api:
    container_name: api
    build:
      context: ./apps/api
      dockerfile: Dockerfile.api
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    command: gunicorn plane.wsgi:application --bind 0.0.0.0:8000 --workers 2
    env_file:
      - ./apps/api/.env
    depends_on:
      - plane-db
      - plane-redis
    ports:
      - "8000:8000"
    networks:
      - plane-net

  worker:
    container_name: worker
    build:
      context: ./apps/api
      dockerfile: Dockerfile.api
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    command: ./bin/docker-entrypoint-worker.sh
    env_file:
      - ./apps/api/.env
    depends_on:
      - api
      - plane-db
      - plane-redis
    networks:
      - plane-net

  beat-worker:
    container_name: beat-worker
    build:
      context: ./apps/api
      dockerfile: Dockerfile.api
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    command: ./bin/docker-entrypoint-beat.sh
    env_file:
      - ./apps/api/.env
    depends_on:
      - api
      - plane-db
      - plane-redis
    networks:
      - plane-net

  migrator:
    container_name: migrator
    build:
      context: ./apps/api
      dockerfile: Dockerfile.api
      args:
        DOCKER_BUILDKIT: 1
    restart: no
    command: ./bin/docker-entrypoint-migrator.sh
    env_file:
      - ./apps/api/.env
    depends_on:
      - plane-db
      - plane-redis
    networks:
      - plane-net

  live:
    container_name: live
    build:
      context: .
      dockerfile: ./apps/live/Dockerfile.live
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    networks:
      - plane-net

  plane-db:
    container_name: plane-db
    image: postgres:15.7-alpine
    restart: always
    command: postgres -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    networks:
      - plane-net

  plane-redis:
    container_name: plane-redis
    image: valkey/valkey:7.2.5-alpine
    restart: always
    volumes:
      - redisdata:/data
    networks:
      - plane-net

  plane-mq:
    container_name: plane-mq
    image: rabbitmq:3.13.6-management-alpine
    restart: always
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - plane-net

  plane-minio:
    container_name: plane-minio
    image: minio/minio
    restart: always
    command: server /export --console-address ":9090"
    volumes:
      - uploads:/export
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    ports:
      - "9000:9000"
      - "9090:9090"
    networks:
      - plane-net

  proxy:
    container_name: proxy
    build:
      context: ./apps/proxy
      dockerfile: Dockerfile.ce
      network: host
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    ports:
      - ${LISTEN_HTTP_PORT}:80
      - ${LISTEN_HTTPS_PORT}:443
    environment:
      FILE_SIZE_LIMIT: ${FILE_SIZE_LIMIT:-5242880}
      BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-uploads}
    depends_on:
      - frontend
      - api
      - space
      - admin
    networks:
      - plane-net

  frontend:
    build:
      context: /home/abdul/projects/ticketing-form
      dockerfile: Dockerfile.dev
    container_name: frontend
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
    ports:
      - "3000:3000"
    networks:
      - plane-net
    volumes:
      - /home/abdul/projects/ticketing-form:/app
      - /app/node_modules

volumes:
  pgdata:
  redisdata:
  uploads:
  rabbitmq_data:

networks:
  plane-net:
    external: true
